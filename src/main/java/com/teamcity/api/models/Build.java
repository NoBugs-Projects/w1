package com.teamcity.api.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.extern.jackson.Jacksonized;

/**
 * Represents a TeamCity build entity.
 * <p>
 * This class models a build execution in the TeamCity system. A build represents
 * a single run of a build configuration and contains information about its
 * execution status, state, and associated build type.
 * </p>
 * 
 * <p>
 * The class uses Lombok annotations for automatic generation of getters, setters,
 * constructors, and other boilerplate code. It also uses Jackson annotations for
 * JSON serialization/deserialization with the TeamCity API.
 * </p>
 * 
 * @author TeamCity Testing Framework
 * @version 1.0
 * @since 1.0
 * @see BaseModel
 * @see BuildType
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
// Чтобы избежать ворнинга "Generating equals/hashCode implementation but without a call to superclass."
@EqualsAndHashCode(callSuper = false)
@Jacksonized
@JsonIgnoreProperties(ignoreUnknown = true)
public class Build extends BaseModel {

    /**
     * Unique identifier for the build.
     * <p>
     * This field serves as the primary key for build identification in API calls.
     * It is typically auto-generated by the TeamCity server when a build is triggered.
     * </p>
     */
    private String id;
    
    /**
     * The build type associated with this build.
     * <p>
     * Contains information about the build configuration that was executed
     * to create this build instance.
     * </p>
     * 
     * @see BuildType
     */
    private BuildType buildType;
    
    /**
     * The current status of the build.
     * <p>
     * Common values include "SUCCESS", "FAILURE", "ERROR", etc.
     * This field indicates the final result of the build execution.
     * </p>
     */
    private String status;
    
    /**
     * The current state of the build.
     * <p>
     * Common values include "running", "finished", "queued", etc.
     * This field indicates the current phase of the build execution.
     * </p>
     */
    private String state;

}
