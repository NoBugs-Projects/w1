name: Report

on:
  workflow_call:
    inputs:
      parent_run_number:
        required: false
        type: string

jobs:
  report:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) Репозиторий (скрипты, workflow, extract-metrics.sh и т.п.)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Скачиваем артефакты тестов в allure-results/ (сливаем все артефакты)
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results
          merge-multiple: true

      # 3) Рабочее дерево опубликованного сайта (ветка gh-pages)
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      # 4) Устанавливаем Java (нужна Allure CLI)
      - name: Setup Java (for Allure CLI)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # 5) Устанавливаем Allure CLI
      - name: Install Allure CLI
        shell: bash
        run: |
          set -euo pipefail
          VER="2.29.0"
          curl -sSL -o "allure-${VER}.tgz" "https://github.com/allure-framework/allure2/releases/download/${VER}/allure-${VER}.tgz"
          sudo tar -zxvf "allure-${VER}.tgz" -C /opt/
          sudo ln -sf "/opt/allure-${VER}/bin/allure" /usr/bin/allure
          allure --version

      # 6) Подготовка history: переносим историю прошлого прогона в allure-results/history (если есть)
      - name: Prepare Allure history
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          # Ищем последний опубликованный ран с allure-report/history
          PREV="$(ls -d gh-pages/*/allure-report 2>/dev/null | sed -E 's|gh-pages/([0-9]+)/allure-report|\1|' | grep -E '^[0-9]+$' | sort -n | tail -1 || true)"
          echo "Detected previous run: ${PREV:-<none>}"

          if [ -n "$PREV" ] && [ -d "gh-pages/${PREV}/allure-report/history" ]; then
            mkdir -p allure-results/history
            cp -r gh-pages/${PREV}/allure-report/history/* allure-results/history/ || true
            echo "History copied from gh-pages/${PREV}/allure-report/history -> allure-results/history"
          else
            echo "No previous history found"
          fi

          echo "== allure-results top-level =="
          find allure-results -maxdepth 1 -type f | sort | head -n 50 || true

      # 7) Генерируем Allure в gh-pages/<run>/allure-report
      - name: Generate Allure report to /allure-report/
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          OUT="gh-pages/${RUN}/allure-report"
          mkdir -p "$OUT"
          # Собираем отчёт из allure-results
          allure generate --clean "allure-results" -o "$OUT"

          echo "== Generated tree =="
          find "gh-pages/${RUN}" -maxdepth 2 -print | sort

      # 8) Кладём Swagger рядом: gh-pages/<run>/swagger-coverage-report/index.html
      - name: Add Swagger coverage to published site
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          DEST="gh-pages/${RUN}/swagger-coverage-report"
          mkdir -p "$DEST"
          if [ -f "allure-results/swagger-coverage-report.html" ]; then
            cp "allure-results/swagger-coverage-report.html" "$DEST/index.html"
          else
            echo "No swagger-coverage-report.html found in allure-results/"
            ls -la allure-results || true
          fi

      # 9) (Опционально) брендинг и генерация метрик по уже опубликованным путям
      - name: Copy branding and generate metrics
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi
          RUN_DIR="gh-pages/${RUN}"
          
          # Опциональные файлы брендинга (если есть)
          [ -f .github/report/logo_icon.png ]     && cp .github/report/logo_icon.png     "$RUN_DIR/" || true
          [ -f .github/report/report_styles.css ] && cp .github/report/report_styles.css "$RUN_DIR/" || true
          
          # Пути для скрипта метрик
          ALLURE_DIR="$RUN_DIR/allure-report"
          SWAGGER_DIR="$RUN_DIR/swagger-coverage-report"
          OUT_DIR="$RUN_DIR"
          
          # Базовый префикс ссылок, например /w1/23/
          REPO="${GITHUB_REPOSITORY#*/}"   # "w1"
          BASE_PREFIX="/${REPO}/${RUN}/"
          
          if [ -f .github/scripts/extract-metrics.sh ]; then
            chmod +x .github/scripts/extract-metrics.sh || true
            .github/scripts/extract-metrics.sh "$ALLURE_DIR" "$SWAGGER_DIR" "$OUT_DIR" "$BASE_PREFIX"
          else
            echo "extract-metrics.sh not found; skipping metrics"
          fi
          
          # (опционально) быстрый просмотр того, что получилось
          echo "== Result files in ${RUN_DIR} =="
          find "$RUN_DIR" -maxdepth 2 -type f | sort


      # 10) Нормализуем владельца/права, чтобы git add не упал из-за Permission denied
      - name: Normalize ownership and permissions in gh-pages
        shell: bash
        run: |
          set -euo pipefail
          sudo chown -R "$(id -u):$(id -g)" gh-pages
          find gh-pages -type d -exec chmod 755 {} \;
          find gh-pages -type f -exec chmod 644 {} \;
          git config --global --add safe.directory "$GITHUB_WORKSPACE/gh-pages"

      # 11) Публикуем всё одним коммитом
      - name: Publish Allure + Swagger + Dashboard (single push)
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          echo "== Preview to publish =="
          find gh-pages -maxdepth 3 -type f | sort | sed -n '1,200p'

          cd gh-pages
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Publish Allure (/allure-report), Swagger and dashboard for run ${RUN}" || echo "Nothing to commit"
          git push

      # 12) Отправляем уведомление в Telegram
      - name: Send Telegram notification
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_REPOSITORY_NAME: ${{ github.event.repository.name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          chmod +x .github/scripts/send-telegram-notification.sh
          ./.github/scripts/send-telegram-notification.sh
