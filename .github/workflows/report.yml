name: Report

on:
  workflow_call:
    inputs:
      parent_run_number:
        required: false
        type: string

jobs:
  report:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (—Å–∫—Ä–∏–ø—Ç—ã, workflow, extract-metrics.sh –∏ —Ç.–ø.)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ allure-results/ (—Å–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results
          merge-multiple: true

      # 3) –†–∞–±–æ—á–µ–µ –¥–µ—Ä–µ–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞ (–≤–µ—Ç–∫–∞ gh-pages)
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      # 4) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Java (–Ω—É–∂–Ω–∞ Allure CLI)
      - name: Setup Java (for Allure CLI)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # 5) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Allure CLI
      - name: Install Allure CLI
        shell: bash
        run: |
          set -euo pipefail
          VER="2.29.0"
          curl -sSL -o "allure-${VER}.tgz" "https://github.com/allure-framework/allure2/releases/download/${VER}/allure-${VER}.tgz"
          sudo tar -zxvf "allure-${VER}.tgz" -C /opt/
          sudo ln -sf "/opt/allure-${VER}/bin/allure" /usr/bin/allure
          allure --version

      # 6) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ history: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—à–ª–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞ –≤ allure-results/history (–µ—Å–ª–∏ –µ—Å—Ç—å)
      - name: Prepare Allure history
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–Ω —Å allure-report/history
          PREV="$(ls -d gh-pages/*/allure-report 2>/dev/null | sed -E 's|gh-pages/([0-9]+)/allure-report|\1|' | grep -E '^[0-9]+$' | sort -n | tail -1 || true)"
          echo "Detected previous run: ${PREV:-<none>}"

          if [ -n "$PREV" ] && [ -d "gh-pages/${PREV}/allure-report/history" ]; then
            mkdir -p allure-results/history
            cp -r gh-pages/${PREV}/allure-report/history/* allure-results/history/ || true
            echo "History copied from gh-pages/${PREV}/allure-report/history -> allure-results/history"
          else
            echo "No previous history found"
          fi

          echo "== allure-results top-level =="
          find allure-results -maxdepth 1 -type f | sort | head -n 50 || true

      # 7) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure –≤ gh-pages/<run>/allure-report
      - name: Generate Allure report to /allure-report/
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          OUT="gh-pages/${RUN}/allure-report"
          mkdir -p "$OUT"
          # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á—ë—Ç –∏–∑ allure-results
          allure generate --clean "allure-results" -o "$OUT"

          echo "== Generated tree =="
          find "gh-pages/${RUN}" -maxdepth 2 -print | sort

      # 8) –ö–ª–∞–¥—ë–º Swagger —Ä—è–¥–æ–º: gh-pages/<run>/swagger-coverage-report/index.html
      - name: Add Swagger coverage to published site
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          DEST="gh-pages/${RUN}/swagger-coverage-report"
          mkdir -p "$DEST"
          if [ -f "allure-results/swagger-coverage-report.html" ]; then
            cp "allure-results/swagger-coverage-report.html" "$DEST/index.html"
          else
            echo "No swagger-coverage-report.html found in allure-results/"
            ls -la allure-results || true
          fi

      # 9) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±—Ä–µ–Ω–¥–∏–Ω–≥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º –ø—É—Ç—è–º
      - name: Copy branding and generate metrics
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi
          RUN_DIR="gh-pages/${RUN}"
          
          # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          [ -f .github/report/logo_icon.png ]     && cp .github/report/logo_icon.png     "$RUN_DIR/" || true
          [ -f .github/report/report_styles.css ] && cp .github/report/report_styles.css "$RUN_DIR/" || true
          
          # –ü—É—Ç–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –º–µ—Ç—Ä–∏–∫
          ALLURE_DIR="$RUN_DIR/allure-report"
          SWAGGER_DIR="$RUN_DIR/swagger-coverage-report"
          OUT_DIR="$RUN_DIR"
          
          # –ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å —Å—Å—ã–ª–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä /w1/23/
          REPO="${GITHUB_REPOSITORY#*/}"   # "w1"
          BASE_PREFIX="/${REPO}/${RUN}/"
          
          if [ -f .github/scripts/extract-metrics.sh ]; then
            chmod +x .github/scripts/extract-metrics.sh || true
            .github/scripts/extract-metrics.sh "$ALLURE_DIR" "$SWAGGER_DIR" "$OUT_DIR" "$BASE_PREFIX"
          else
            echo "extract-metrics.sh not found; skipping metrics"
          fi
          
          # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
          echo "== Result files in ${RUN_DIR} =="
          find "$RUN_DIR" -maxdepth 2 -type f | sort


      # 10) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞/–ø—Ä–∞–≤–∞, —á—Ç–æ–±—ã git add –Ω–µ —É–ø–∞–ª –∏–∑-–∑–∞ Permission denied
      - name: Normalize ownership and permissions in gh-pages
        shell: bash
        run: |
          set -euo pipefail
          sudo chown -R "$(id -u):$(id -g)" gh-pages
          find gh-pages -type d -exec chmod 755 {} \;
          find gh-pages -type f -exec chmod 644 {} \;
          git config --global --add safe.directory "$GITHUB_WORKSPACE/gh-pages"

      # 11) –ü—É–±–ª–∏–∫—É–µ–º –≤—Å—ë –æ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º
      - name: Publish Allure + Swagger + Dashboard (single push)
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi

          echo "== Preview to publish =="
          find gh-pages -maxdepth 3 -type f | sort | sed -n '1,200p'

          cd gh-pages
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Publish Allure (/allure-report), Swagger and dashboard for run ${RUN}" || echo "Nothing to commit"
          git push

      # 12) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      - name: Send Telegram notification
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          RUN="${{ inputs.parent_run_number }}"
          if [ -z "$RUN" ]; then RUN="${{ github.run_number }}"; fi
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="SUCCESS"
          elif [ "${{ job.status }}" = "failure" ]; then
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="FAILED"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="CANCELLED"
          fi
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è JSON)
          MESSAGE="üöÄ *Test Execution Report* ${STATUS_EMOJI}

          *Status:* ${STATUS_TEXT}
          *Run Number:* ${RUN}
          *Repository:* ${{ github.repository }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* \`${{ github.sha }}\`

          üìä *Test Report:* https://nobugs-projects.github.io/w1/${RUN}/

          üîó *Allure Report:* https://nobugs-projects.github.io/w1/${RUN}/allure-report/
          üîç *Swagger Coverage:* https://nobugs-projects.github.io/w1/${RUN}/swagger-coverage-report/

          *Workflow:* ${{ github.workflow }}
          *Triggered by:* ${{ github.actor }}"
          
          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è JSON
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g' | sed 's/\\/\\\\/g')
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          echo "Sending Telegram notification..."
          TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TELEGRAM_CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"
          
          # Validate required secrets
          if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
            echo "‚ùå TELEGRAM_BOT_TOKEN secret is not set"
            exit 1
          fi
          
          if [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ùå TELEGRAM_CHAT_ID secret is not set"
            exit 1
          fi
          
          echo "Bot Token: ${TELEGRAM_BOT_TOKEN:0:10}..."
          echo "Chat ID: $TELEGRAM_CHAT_ID"
          
          # Test bot token first
          echo "Testing bot token..."
          BOT_TEST_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe" || echo "HTTPSTATUS:000")
          BOT_TEST_HTTP_STATUS=$(echo $BOT_TEST_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ "$BOT_TEST_HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Bot token is invalid. HTTP Status: $BOT_TEST_HTTP_STATUS"
            echo "Response: $(echo $BOT_TEST_RESPONSE | sed -e 's/HTTPSTATUS:.*//g')"
            exit 1
          fi
          
          echo "‚úÖ Bot token is valid"
          
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"${TELEGRAM_CHAT_ID}\",
              \"text\": \"${ESCAPED_MESSAGE}\",
              \"parse_mode\": \"Markdown\",
              \"disable_web_page_preview\": false
            }" || echo "HTTPSTATUS:000")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Telegram notification sent successfully"
          else
            echo "‚ùå Failed to send Telegram notification. HTTP Status: $HTTP_STATUS"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
